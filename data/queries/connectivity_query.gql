match(
  node('system', system_type='switch'{switch_filter}, name='switch')
    .out('hosted_interfaces').node('interface', if_type='ethernet', name='intf1')
    .out('link').node('link', name='link1')
    .in_('link').node(name='intf2')
    .in_('hosted_interfaces').node('system', system_type='server', name='server'),
  optional(
    node(name='switch').out('part_of_redundancy_group').node('redundancy_group', name='rg1')
      .out('hosted_interfaces').node('interface', name='evpn1')
      .out('link').node('link', name='evpn-link')
      .in_('link').node('interface', name='evpn2')
      .in_('hosted_interfaces').node(name='server'),
    ),
  optional(
    node(name='rg1').out('hosted_interfaces').node(name='evpn1')
      .out('composed_of').node(name='ae1')
      .out('composed_of').node(name='intf1')
    ),
  optional(
    node(name='rg1').out('hosted_interfaces').node(name='evpn1')
      .out().node(name='intf1')
   ),
  optional(
    node(name='rg1').out('hosted_interfaces').node(name='evpn1')
      .out().node('ep_group')
      .in_().node('ep_application_instance')
      .out().node('ep_endpoint_policy', policy_type_name='batch', name='CT')
   )
)